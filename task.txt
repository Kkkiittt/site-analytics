## 🧭 1. Трекер поведения пользователей (User Journey Analytics)

### 🎯 Цель

Создать систему, которая собирает, хранит и анализирует действия пользователей на сайте — клики, прокрутки, переходы, заполнения форм и т.д.
Главная задача — понять, **на каком этапе пользователи “отваливаются”** до достижения целевой цели (регистрация, покупка и т.п.).

### 🏗 Архитектура

- **Presentation:** ASP.NET Core Web API (.NET 9)
- **Application:** сервисы аналитики, восстановления сессий и расчёта конверсии
- **Infrastructure:** EF Core + PostgreSQL, Redis для хранения активных сессий

### 📦 Основные сущности

- **UserSession** — уникальная сессия пользователя
- **UserEvent** — событие: клик, скролл, переход и т.д.
- **FunnelStage** — этап воронки (например: Главная → Каталог → Корзина → Оплата)

### ⚙️ Основной функционал

1. **Сбор событий**

   - Endpoint `/api/events/collect` для записи действий.
   - События группируются по `SessionId`.
   
2. **Формирование тепловой карты (Heatmap)**
   - Подсчёт кликов по элементам страниц.
3. **Анализ воронки**
   - Расчёт процента переходов между этапами, определение точек потери пользователей.
4. **Онлайн-активность**
   - Подсчёт активных пользователей за последние 5 минут (Redis-кэш).

### 🧠 Проблемы, которые решает студент

- Восстановление сессии из потока событий
- Расчёт конверсии
- Работа с кэшем и БД

### ✅ Требования

- Swagger / OpenAPI
- Serilog + Middleware для ошибок
- EF Core миграции + Seed-данные
- Unit-тесты аналитических сервисов
